import numpy as np
import matplotlib.pyplot as plt
from scipy.fftpack import fft
from scipy.optimize import minimize

data1 = [6.0, 77.0, 145.0, 171.0, 304.0, 437.0, 470.0, 449.0, 497.0, 578.0, 539.0, 531.0, 509.0, 498.0, 473.0, 300.0, 176.0, 162.0, 142.0, 169.0, 193.0, 205.0, 183.0, 181.0, 189.0, 266.0, 372.0, 435.0, 439.0, 499.0, 500.0, 525.0, 548.0, 553.0, 539.0, 502.0, 404.0, 362.0, 313.0, 238.0, 223.0, 224.0, 219.0, 263.0, 234.0, 222.0, 274.0, 300.0, 323.0, 420.0, 480.0, 490.0, 495.0, 542.0, 603.0, 610.0, 586.0, 569.0, 501.0, 510.0, 411.0, 302.0, 243.0, 256.0, 262.0, 303.0, 297.0, 283.0, 253.0, 313.0, 369.0, 480.0, 488.0, 459.0, 481.0, 542.0, 609.0, 611.0, 559.0, 626.0, 577.0, 540.0, 540.0, 435.0, 295.0, 258.0, 252.0, 261.0, 307.0, 273.0, 288.0, 288.0, 342.0, 438.0, 536.0, 481.0, 460.0, 476.0, 543.0, 584.0, 538.0, 559.0, 586.0, 596.0, 559.0, 499.0, 440.0, 400.0, 287.0, 245.0, 218.0, 257.0, 217.0, 259.0, 257.0, 319.0, 338.0, 422.0, 497.0, 464.0, 450.0, 523.0, 524.0, 553.0, 566.0, 548.0, 547.0, 521.0, 430.0, 347.0, 260.0, 286.0, 313.0, 324.0, 318.0, 316.0, 260.0, 267.0, 298.0, 298.0]

data2 = [36.0, 48.0, 46.0, 42.0, 59.0, 98.0, 115.0, 151.0, 174.0, 164.0, 192.0, 183.0, 147.0, 173.0, 178.0, 166.0, 184.0, 183.0, 131.0, 164.0, 162.0, 188.0, 166.0, 169.0, 208.0, 225.0, 257.0, 294.0, 362.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 353.0, 563.0, 647.0, 576.0, 530.0, 548.0, 545.0, 544.0, 543.0, 566.0, 534.0, 554.0, 518.0, 407.0, 427.0, 407.0, 426.0, 402.0, 398.0, 398.0, 393.0, 324.0, 251.0, 242.0, 197.0, 204.0, 197.0, 189.0, 237.0, 261.0, 238.0, 227.0, 209.0, 206.0, 226.0, 175.0, 186.0, 214.0, 234.0, 212.0, 237.0, 249.0, 219.0, 206.0, 258.0, 211.0, 212.0, 215.0, 220.0, 229.0, 216.0, 190.0, 204.0, 216.0, 202.0, 239.0, 212.0, 201.0, 226.0, 278.0, 248.0, 262.0, 292.0, 260.0, 283.0, 234.0, 232.0, 241.0, 281.0, 281.0]

data3 = [97.0, 129.0, 124.0, 102.0, 101.0, 150.0, 203.0, 263.0, 282.0, 329.0, 303.0, 250.0, 259.0, 276.0, 356.0, 323.0, 350.0, 320.0, 360.0, 339.0, 342.0, 349.0, 315.0, 330.0, 326.0, 336.0, 302.0, 240.0, 292.0, 279.0, 342.0, 245.0, 198.0, 173.0, 150.0, 149.0, 161.0, 187.0, 184.0, 160.0, 147.0, 185.0, 218.0, 270.0, 299.0, 292.0, 234.0, 213.0, 221.0, 246.0, 277.0, 367.0, 326.0, 346.0, 345.0, 347.0, 332.0, 314.0, 350.0, 323.0, 304.0, 263.0, 258.0, 240.0, 232.0, 279.0, 285.0, 216.0, 194.0, 165.0, 170.0, 187.0, 182.0, 174.0, 183.0, 190.0, 208.0, 243.0, 247.0, 267.0, 272.0, 257.0, 221.0, 202.0, 202.0]

#plt.figure()
#plt.plot(np.abs(freq), '.')
#plt.draw()
pi = np.pi

def residualError(x, data):
    a = x[0]
    f = x[1]
    ph = x[2]
    t = np.array(range(len(data)))

    dbar = np.cos(f*t + ph) * a
    return np.sum(np.square(data - dbar)) / len(data)

def sin_fit(data, plot=False):
    shifted = np.array(data) - np.mean(data)
    y = fft(shifted)
    halfY = y[0:len(y)/2]
    norm2Y = np.abs(halfY * np.conj(halfY))
    bestFreq = np.argmax(norm2Y)
    #avgFreq = (bestFreq*norm2Y[bestFreq] + (bestFreq-1)*norm2Y[bestFreq-1] + (bestFreq+1)*norm2Y[bestFreq+1]) / (norm2Y[bestFreq]+norm2Y[bestFreq-1]+norm2Y[bestFreq+1])

    avgFreq = bestFreq * 2 * np.pi / len(data)
    phase = np.angle(y[bestFreq])
    amp = np.abs(y[bestFreq]) / len(data) * 2

    objFunc = lambda(x): residualError(x, shifted)

    res = minimize(objFunc, np.array([amp, avgFreq, phase]))
    avgFreq = res.x[1]
    phase = res.x[2]
    amp = res.x[0]
    t = np.array(range(len(data)))
    fitCurve = np.cos(avgFreq*t + phase) * amp

    if plot:

        plt.figure()
        plt.plot(shifted, '.')
        plt.plot(fitCurve, '-')
        plt.show()

    print 'avgFreq' + str(avgFreq)
    return fitCurve, 2*pi/avgFreq, 0, 

# print 2*pi/ sin_fit(data1, True)
# print 2*pi/ sin_fit(data2, True)
# print 2*pi/ sin_fit(data3, True)
